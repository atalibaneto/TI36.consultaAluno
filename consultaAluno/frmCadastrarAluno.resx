<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        gg==
</value>
  </data>
</root>